/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_SETTINGS_PB_H_INCLUDED
#define PB_SETTINGS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _PedalConfig { 
    int32_t min;
    int32_t max;
    bool smoothing;
    bool invert;
} PedalConfig;

typedef struct _Data { 
    bool has_throttle;
    PedalConfig throttle;
    bool has_brake;
    PedalConfig brake;
    bool has_clutch;
    PedalConfig clutch;
} Data;

typedef struct _Settings { 
    int32_t version;
    bool has_data;
    Data data;
} Settings;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define PedalConfig_init_default                 {0, 0, 0, 0}
#define Data_init_default                        {false, PedalConfig_init_default, false, PedalConfig_init_default, false, PedalConfig_init_default}
#define Settings_init_default                    {0, false, Data_init_default}
#define PedalConfig_init_zero                    {0, 0, 0, 0}
#define Data_init_zero                           {false, PedalConfig_init_zero, false, PedalConfig_init_zero, false, PedalConfig_init_zero}
#define Settings_init_zero                       {0, false, Data_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define PedalConfig_min_tag                      1
#define PedalConfig_max_tag                      2
#define PedalConfig_smoothing_tag                3
#define PedalConfig_invert_tag                   4
#define Data_throttle_tag                        1
#define Data_brake_tag                           2
#define Data_clutch_tag                          3
#define Settings_version_tag                     1
#define Settings_data_tag                        2

/* Struct field encoding specification for nanopb */
#define PedalConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    min,               1) \
X(a, STATIC,   SINGULAR, INT32,    max,               2) \
X(a, STATIC,   SINGULAR, BOOL,     smoothing,         3) \
X(a, STATIC,   SINGULAR, BOOL,     invert,            4)
#define PedalConfig_CALLBACK NULL
#define PedalConfig_DEFAULT NULL

#define Data_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  throttle,          1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  brake,             2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  clutch,            3)
#define Data_CALLBACK NULL
#define Data_DEFAULT NULL
#define Data_throttle_MSGTYPE PedalConfig
#define Data_brake_MSGTYPE PedalConfig
#define Data_clutch_MSGTYPE PedalConfig

#define Settings_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    version,           1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  data,              2)
#define Settings_CALLBACK NULL
#define Settings_DEFAULT NULL
#define Settings_data_MSGTYPE Data

extern const pb_msgdesc_t PedalConfig_msg;
extern const pb_msgdesc_t Data_msg;
extern const pb_msgdesc_t Settings_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define PedalConfig_fields &PedalConfig_msg
#define Data_fields &Data_msg
#define Settings_fields &Settings_msg

/* Maximum encoded size of messages (where known) */
#define Data_size                                84
#define PedalConfig_size                         26
#define Settings_size                            97

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
